// Generated by gencpp from file ilk_paket/kamera.msg
// DO NOT EDIT!


#ifndef ILK_PAKET_MESSAGE_KAMERA_H
#define ILK_PAKET_MESSAGE_KAMERA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ilk_paket
{
template <class ContainerAllocator>
struct kamera_
{
  typedef kamera_<ContainerAllocator> Type;

  kamera_()
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
    }
  kamera_(const ContainerAllocator& _alloc)
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
  (void)_alloc;
    }



   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _x2_type;
  _x2_type x2;

   typedef int32_t _y2_type;
  _y2_type y2;





  typedef boost::shared_ptr< ::ilk_paket::kamera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ilk_paket::kamera_<ContainerAllocator> const> ConstPtr;

}; // struct kamera_

typedef ::ilk_paket::kamera_<std::allocator<void> > kamera;

typedef boost::shared_ptr< ::ilk_paket::kamera > kameraPtr;
typedef boost::shared_ptr< ::ilk_paket::kamera const> kameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ilk_paket::kamera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ilk_paket::kamera_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ilk_paket::kamera_<ContainerAllocator1> & lhs, const ::ilk_paket::kamera_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ilk_paket::kamera_<ContainerAllocator1> & lhs, const ::ilk_paket::kamera_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ilk_paket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::kamera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::kamera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::kamera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::kamera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::kamera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::kamera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ilk_paket::kamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01b404007f6687249fa0f27eea3c1daf";
  }

  static const char* value(const ::ilk_paket::kamera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01b404007f668724ULL;
  static const uint64_t static_value2 = 0x9fa0f27eea3c1dafULL;
};

template<class ContainerAllocator>
struct DataType< ::ilk_paket::kamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ilk_paket/kamera";
  }

  static const char* value(const ::ilk_paket::kamera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ilk_paket::kamera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 x1\n"
"int32 y1\n"
"int32 x2\n"
"int32 y2\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::ilk_paket::kamera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ilk_paket::kamera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kamera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ilk_paket::kamera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ilk_paket::kamera_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ILK_PAKET_MESSAGE_KAMERA_H
